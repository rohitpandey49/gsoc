"use strict";(self.webpackChunkgosc_2021=self.webpackChunkgosc_2021||[]).push([[3334],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),h=a,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5602:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],s={title:"Week 0",author:"Shreya Singh"},l=void 0,p={unversionedId:"2021/minerva/updates/2021-06-07",id:"2021/minerva/updates/2021-06-07",title:"Week 0",description:"\x3c!--",source:"@site/docs/2021/minerva/updates/2021-06-07.md",sourceDirName:"2021/minerva/updates",slug:"/2021/minerva/updates/2021-06-07",permalink:"/gsoc/docs/2021/minerva/updates/2021-06-07",draft:!1,editUrl:"https://github.com/fossology/gsoc/edit/main/docs/2021/minerva/updates/2021-06-07.md",tags:[],version:"current",frontMatter:{title:"Week 0",author:"Shreya Singh"},sidebar:"2021",previous:{title:"Introduction",permalink:"/gsoc/docs/2021/minerva/"},next:{title:"Week 1",permalink:"/gsoc/docs/2021/minerva/updates/2021-06-15"}},c={},u=[{value:"Attendees",id:"attendees",level:3},{value:"Discussions",id:"discussions",level:3},{value:"Week 0 Progress",id:"week-0-progress",level:3},{value:"Conclusion and Further Plans",id:"conclusion-and-further-plans",level:2}],m={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"coding-week-0-meeting"},"Coding Week-0 Meeting"),(0,o.kt)("h3",{id:"attendees"},"Attendees"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/GMishx"},"Gaurav Mishra ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/ag4ums"},"Anupam Ghosh ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/mcjaeger"},"Michael C. Jaeger")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/shaheemazmalmmd"},"Shaheem Azmal ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/hastagAB"},"Ayush Bhardwaj ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/vasudevmaduri"},"Vasudev Maduri ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/OmarAbdelSamea"},"Omar Mohamed ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Kaushl2208"},"Kaushlendra Pratap ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/SinghShreya05"},"Shreya Singh "))),(0,o.kt)("h3",{id:"discussions"},"Discussions"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Brainstormed on various ways through which dataset can be generated, and broke it down into different parts."),(0,o.kt)("li",{parentName:"ol"},"Python library to be used in text generation using regex - Xeger/Intxeger"),(0,o.kt)("li",{parentName:"ol"},"To reuse ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/hastagAB/SPDX-OSS-Dataset/blob/master/script.py"},"Script")," to n-gram the paragraphs of license texts and to generate different permutations and combinations of them."),(0,o.kt)("li",{parentName:"ol"},"Regex of different licenses can be extracted from ",(0,o.kt)("a",{parentName:"li",href:"https://spdx.org/licenses/licenses.json"},"licenses.json"),", ",(0,o.kt)("a",{parentName:"li",href:"https://spdx.org/licenses/exceptions.json"},"exceptions.json"),", or ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/fossology/fossology/blob/master/src/nomos/agent/STRINGS.in"},"STRINGS.in")),(0,o.kt)("li",{parentName:"ol"},"Shifting the codebase of Atarashi to dask/vaex will boost the runtime. This to be done in parallel with the contribution. Results from few python files showed a significant boost to runtime.")),(0,o.kt)("h3",{id:"week-0-progress"},"Week 0 Progress"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"I reused the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/hastagAB/SPDX-OSS-Dataset/blob/master/script.py"},"script.py")," file to split the files in different combinations of paras that will create its combinations: like para1+para3, para2+para4 after each traversal."),(0,o.kt)("li",{parentName:"ol"},"Different org licenses are 60-70% and the ones with different versions are 90% similar. So to the split files, keywords and regex of the specific license_header can be added."),(0,o.kt)("li",{parentName:"ol"},'Tested Intxeger performance on the regex from STRINGS.in file. We are able to generate "Nsamples", and add them to all the paras, the randomness could be minimized.',(0,o.kt)("br",null),'`x = intxeger.build(r"motosoto open source licen[cs]e =FEW= (v|version )0\\.?9\\.?1")`',(0,o.kt)("br",null),"`print(x.sample(N=5))`",(0,o.kt)("br",null),"**_Output_** : ['motosoto open source license =FEW= version 0.9.1', 'motosoto open source licence =FEW= version 0.9.1', 'motosoto open source licence =FEW= v0.91', 'motosoto open source license =FEW= v0.91', 'motosoto open source license =FEW= v0.9.1']"),(0,o.kt)("li",{parentName:"ol"},"Generated statements in Nsamples were unique which will automatically make the generated text files unique."),(0,o.kt)("li",{parentName:"ol"},"The number of datasets generated will depend on the number of paras + Nsamples."),(0,o.kt)("li",{parentName:"ol"},"Regex from SPDX released ",(0,o.kt)("a",{parentName:"li",href:"https://spdx.org/licenses/licenses.json"},"licenses.json")," and ",(0,o.kt)("a",{parentName:"li",href:"https://spdx.org/licenses/exceptions.json"},"exceptions.json")," can be extracted by redirecting to detailsUrl of JSON file -> standardLicenseTemplate (regex) -> licenseText (complete text)."),(0,o.kt)("li",{parentName:"ol"},"Work Samples : ",(0,o.kt)("a",{parentName:"li",href:"https://colab.research.google.com/drive/1Q49H5RhZ8Z6aG6EYQJlxbo4JOvAg8K0v?usp=sharing"},"Texts-Intxeger.ipynb"),", ",(0,o.kt)("a",{parentName:"li",href:"https://colab.research.google.com/drive/1z6X27pGzDIO2dHdfwYnpWZy1kYhEK4Th?usp=sharing"},"Texts-difflibraries.ipynb"))),(0,o.kt)("h2",{id:"conclusion-and-further-plans"},"Conclusion and Further Plans"),(0,o.kt)("p",null,"Implementation of Intxeger on one of the licenses and generating files using it."))}h.isMDXComponent=!0}}]);